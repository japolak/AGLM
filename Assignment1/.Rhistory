I.m <- k.mle * n
se.m <- 1/sqrt(I.m)
V.loglike <- Vectorize(loglike)
ll <- outer(mu, kappa, V.loglike)
k.mle <- n/sum((x - mean(x))^2)
I.k <- n/(2 * k.mle^2)
se.k <- sqrt(1/I.k) # standard error = sqrt(1/’observed fisher information’) (wald.ci <- c(k.mle + qnorm(0.05/2) * se.k, k.mle + qnorm(1 - 0.05/2) * se.k))
## [1] 0.02062612 0.31346108
abline(h = wald.ci, lty = 2)
## [1] 0.02062612 0.31346108
I.m <- k.mle * n
se.m <- 1/sqrt(I.m)
(wald.ci.m <- mean(x) + c(-1, 1) * qnorm(1 - 0.05/2) * se.m)
## [1] 29.31653 32.34947
abline(h = wald.ci, lty = 2)
(wald.ci <- c(k.mle + qnorm(0.05/2) * se.k, k.mle + qnorm(1 - 0.05/2) * se.k))
## [1] 0.02062612 0.31346108
I.m <- k.mle * n
se.m <- 1/sqrt(I.m)
(wald.ci.m <- mean(x) + c(-1, 1) * qnorm(1 - 0.05/2) * se.m)
## [1] 29.31653 32.34947
abline(h = wald.ci, lty = 2)
abline(v = wald.ci.m, lty = 2)
rect(wald.ci[1],wald.ci[2],wald.ci.m[1],wald.ci.m[2], border='blue')
rect(wald.ci[1],wald.ci.m[1],wald.ci[2],wald.ci.m[2], border='blue')
wald.ci
wald.ci.m
rect(wald.ci.m[1],wald.ci[1],wald.ci.m[2],wald.ci[2], border='blue')
vol.under.cont(res$min)
contour(mu, kappa, myng, levels = c(res$minimum, .0000001,.0001,.01,.1,.5,1,1.5,2,2.5), col = c(2, rep(1, 9)))
loglike <- function(m, k) {
-n/2 * log(2 * pi) + n/2 * log(k) - k/2 * sum((x - rep(m, n))^2)
}
V.loglike <- Vectorize(loglike)
ll <- outer(mu, kappa, V.loglike)
k.mle <- n/sum((x - mean(x))^2)
I.k <- n/(2 * k.mle^2)
se.k <- sqrt(1/I.k) # standard error = sqrt(1/’observed fisher information’)
(wald.ci <- c(k.mle + qnorm(0.05/2) * se.k, k.mle + qnorm(1 - 0.05/2) * se.k))
I.m <- k.mle * n
se.m <- 1/sqrt(I.m)
(wald.ci.m <- mean(x) + c(-1, 1) * qnorm(1 - 0.05/2) * se.m)
rect(wald.ci.m[1],wald.ci[1],wald.ci.m[2],wald.ci[2], border='blue')
marginal
legend('topright',legend=c('wald marginal','likelihood ratio'),col=c('blue','red'), lty=1)
legend('topright',legend=c('wald marginal','HPD region'),col=c('blue','red'), lty=1)
legend('topright',legend=c('Wald marginal','HPD region'),col=c('blue','red'), lty=1)
contour(mu, kappa, myng,
levels = c(res$minimum, .0000001,.0001,.01,.1,.5,1,1.5,2,2.5),
col = c(2, rep(1, 9)),
xlab=expression(kappa)
)
contour(mu, kappa, myng,
levels = c(res$minimum, .0000001,.0001,.01,.1,.5,1,1.5,2,2.5),
col = c(2, rep(1, 9)),
xlab=expression(mu),
ylab=expression(kappa)
)
contour(mu, kappa, myng,
levels = c(res$minimum, .0000001,.0001,.01,.1,.5,1,1.5,2,2.5),
col = c(2, rep(1, 9)),
xlab=expression(mu),
ylab=expression(kappa),
main="Prior Density"
)
abline(h = 1, col = "red", lty = 2)
x = rexp(10000, 2)
y = rexp(10000, 2) # we want to predict these observations given ’x’
hist(pexp(y, 1/x), prob = T,
main = "PIT transformation applied to the plug-in prediction approach"
xlab = "")
x = rexp(10000, 2)
y = rexp(10000, 2) # we want to predict these observations given ’x’
hist(pexp(y, 1/x), prob = T,
main = "PIT transformation applied to the plug-in prediction approach",
xlab = "")
abline(h = 1, col = "red", lty = 2)
abline(h = 1, col = "red", lty = 1)
x = rexp(10000, 2)
y = rexp(10000, 2) # we want to predict these observations given ’x’
hist(pexp(y, 1/x), prob = T,
main = "Histogram",
xlab = "")
abline(h = 1, col = "red", lty = 1)
hist(pexp(y, 1/x), prob = T,
main = "Histogram of plug-in PIT transform",
xlab = "Probabilities")
hist(pexp(y, 1/x), prob = T,
main = "Histogram of plug-in PIT transform",
xlab = "Probability")
abline(h = 1, col = "red", lty = 1)
x = rexp(10000, 2)
y = rexp(10000, 2) # we want to predict these observations given ’x’
hist(pexp(y, 1/x), prob = T,
main = "Histogram of plug-in PIT transform",
xlab = "Probability")
abline(h = 1, col = "red", lty = 1)
hist(1 - x/(x + y), prob = T,
main = "Histogram of predictive likelihood PIT transform",
xlab = "Probability")
hist(1 - x/(x + y), prob = T,
main = "Histogram of predictive likelihood PIT transform",
xlab = "Probability")
abline(h = 1, col = "red", lty = 1)
x = 41 ; e = 23.3
alpha.prior = beta.prior = 8.78
alpha.post = alpha.prior + x
beta.post = beta.prior + e
curve(dgamma(x,alpha.prior,beta.prior),0,5,
ylab=expression(f(lambda))
curve(dgamma(x,alpha.prior,beta.prior),0,5,
xlab=expression(lambda),
ylab=expression(f(lambda))
)
curve(dgamma(x,alpha.prior,beta.prior),0,5,
xlab=expression(lambda),
ylab=expression(f[lambda])
)
curve(dgamma(x,alpha.prior,beta.prior),0,5,
xlab=expression(lambda),
ylab=expression(f(lambda))
)
curve(dgamma(x,alpha.prior,beta.prior),0,5,
col = 'blue'
xlab=expression(lambda),
ylab=expression(f(lambda))
)
curve(dgamma(x,alpha.prior,beta.prior),0,5,
col = 'blue',
xlab=expression(lambda),
ylab=expression(f(lambda))
)
curve(dgamma(x,alpha.post,beta.post),0,5,
add = True, col = 'red')
curve(dgamma(x,alpha.post,beta.post),0,5,
add = TRUE, col = 'red')
curve(dgamma(x,alpha.prior,beta.prior),0,5,
col = 'blue',
xlab=expression(lambda),
ylab=expression(f(lambda),
ylim=c(0,3))
)
curve(dgamma(x,alpha.post,beta.post),0,5,
add = TRUE, col = 'red')
curve(dgamma(x,alpha.prior,beta.prior),0,5,
col = 'blue',
xlab=expression(lambda),
ylab=expression(f(lambda),
ylim=c(0,5))
)
curve(dgamma(x,alpha.post,beta.post),0,5,
add = TRUE, col = 'red')
curve(dgamma(x,alpha.prior,beta.prior),0,5,
col = 'blue',
xlab=expression(lambda),
ylab=expression(f(lambda),
ylim=c(0,2.5))
)
curve(dgamma(x,alpha.post,beta.post),0,5,
add = TRUE, col = 'red')
curve(dgamma(x,alpha.prior,beta.prior),
col = 'blue',
xlab=expression(lambda),
ylab=expression(f(lambda)),
ylim=c(0,2.5),xlim=c(0,5)
)
curve(dgamma(x,alpha.post,beta.post),0,5,
add = TRUE, col = 'red')
curve(dgamma(x,alpha.prior,beta.prior),
col = 'blue',
xlab=expression(lambda),
ylab=expression(f(lambda)),
ylim=c(0,2),xlim=c(0,5)
)
curve(dgamma(x,alpha.post,beta.post),0,5,
add = TRUE, col = 'red')
curve(dgamma(x,alpha.prior,beta.prior),
col = 'blue',
xlab=expression(lambda),
ylab=expression(f(lambda)),
ylim=c(0,2),xlim=c(0,4)
)
curve(dgamma(x,alpha.post,beta.post)
add = TRUE, col = 'red')
curve(dgamma(x,alpha.prior,beta.prior),
col = 'blue',
xlab=expression(lambda),
ylab=expression(f(lambda)),
ylim=c(0,2),xlim=c(0,4)
)
curve(dgamma(x,alpha.post,beta.post),
add = TRUE, col = 'red')
legend('topright',c('Posterior','Prior'),col=2:3)
legend('topright',c('Posterior','Prior'),col=2:3,lty =1)
legend('topright',c('Posterior','Prior'),col=c(2,4),lty =1)
legend('topright',c('Posterior','Prior'),col=c('red','blue'),lty =1)
curve(dgamma(x,alpha.prior,beta.prior),
col = 'blue',
xlab=expression(lambda),
ylab=expression(f(lambda)),
ylim=c(0,2),xlim=c(0,4),
main='Prior and Posterior distribution'
)
curve(dgamma(x,alpha.post,beta.post),add = TRUE, col = 'red')
legend('topright',c('Posterior','Prior'),col=c('red','blue'),lty =1)
install.packages('TeachingDemos')
library(TeachingDemos)
hpdi = hpd(qgamma,alpha.post,beta.post,conf=0.95)
hpdi
abline(v=hpdi,col=5)
abline(v=hpdi,col=3)
hpdi = hpd(qgamma,shape= alpha.post,rate=beta.post,conf=0.95)
abline(v=hpdi,col=3)
hpdi
abline(v=hpdi,col=5)
abline(v=hpdi,col=6)
abline(v=hpdi,col=2)
abline(v=hpdi,col=2,lty=2)
curve(dgamma(x,alpha.prior,beta.prior),
col = 'blue',
xlab=expression(lambda),
ylab=expression(f(lambda)),
ylim=c(0,2),xlim=c(0,4),
main='Prior and Posterior distribution'
)
curve(dgamma(x,alpha.post,beta.post),add = TRUE, col = 'red')
hpdi = hpd(qgamma,shape=alpha.post,rate=beta.post,conf=0.95)
abline(v=hpdi,col=2,lty=2)
abline(v=hpdi,col=2,lty=3)
x = 41 ; e = 23.3
alpha.prior = beta.prior = 8.78
alpha.post = alpha.prior + x
beta.post = beta.prior + e
curve(dgamma(x,alpha.prior,beta.prior),
col = 'blue',
xlab=expression(lambda),
ylab=expression(f(lambda)),
ylim=c(0,2),xlim=c(0,4),
main='Prior and Posterior distribution'
)
curve(dgamma(x,alpha.post,beta.post),add = TRUE, col = 'red')
hpdi = hpd(qgamma,shape=alpha.post,rate=beta.post,conf=0.95)
abline(v=hpdi,col=2,lty=3)
legend('topright',c('Posterior','Prior'),col=c('red','blue'),lty =1)
legend('topright',c('Prior','Posterior','95% HPDI'),col=c('blue','red','red'),lty =c(1,1,3))
x = 41 ; e = 23.3
alpha.prior = beta.prior = 8.78
alpha.post = alpha.prior + x
beta.post = beta.prior + e
curve(dgamma(x,alpha.prior,beta.prior),
col = 'blue',
xlab=expression(lambda),
ylab=expression(f(lambda)),
ylim=c(0,2),xlim=c(0,4),
main='Prior and Posterior distribution'
)
curve(dgamma(x,alpha.post,beta.post),add = TRUE, col = 'red')
abline(v=hpd(qgamma,shape=alpha.post,rate=beta.post,conf=0.95),col=2,lty=3)
legend('topright',c('Prior','Posterior','95% HPDI'),col=c('blue','red','red'),lty =c(1,1,3))
plot(x, dweibull(x, kappa, sigma), type = "n", xlab = "x", ylab = expression(paste("f(x;",  kappa, ",", sigma, ")", sep = "")), main = "The Weibull Distribution")
kappa <- c(0.5, 1, 1.5, 5)
sigma <- c(1, 1.5, 2)
x <- seq(0, 6, l = 500)
plot(x, dweibull(x, kappa, sigma), type = "n", xlab = "x", ylab = expression(paste("f(x;",  kappa, ",", sigma, ")", sep = "")), main = "The Weibull Distribution")
rep.int(1,1)
rep.int(1,4)
vrep <- Vectorize(rep.int)
vrep(1:4, 4:1)
vrep(times = 1:4, x = 4:1)
vrep <- Vectorize(rep.int, "times")
vrep(times = 1:4, x = 42)
vrep(times = 1, x = 42)
rep.int(times=1,x=42)
rep.int(times=1:4,x=42)
x=seq(0,10,10)
x=seq(0,10,l=10)
x=seq(1,10,l=10)
x
plot(x)
a=rep(1,10)
a=rep(1,10)
b=seq(1,10,l=10)
plot(a,b)
plto(a)
plot(a)
plot(b)
cor(a,b)
a=c(0,rep(1,10))
b=seq(0,10,l=11)
cor(a,b)
plot(a,col=1)
plot(a,col=2)
points(b,col=3)
a=rnorm(0,0.7)
plot(a)
a=rnorm(100,0,0.7)
plot(a)
x1 <- rnorm(100)
x2  <- rnorm(100)
a <- rnorm(100)
b  <- rnorm(100)
c <- 3*a + 2*b + rnorm(100, 0, .3)
cor(a,c)
cor(b,c)
cor(a,b)
a <- rnorm(100)
b  <- rnorm(100)
c <- a + b
cor(a,c)
cor(b,c)
cor(a,b)
a <- rnorm(100)
b  <- rnorm(100)
c <- a + b
cor(a,c)
cor(b,c)
cor(a,b)
a <- rnorm(100)
b  <- rnorm(100)
c <- 3*a + 2*b
cor(a,c)
cor(b,c)
cor(a,b)
a <- rnorm(100)
b  <- rnorm(100)
c <- 3*a + 2*b + rnorm(100, 0, .3)
cor(a,c)
cor(b,c)
cor(a,b)
set.seed(1)
a <- rnorm(100)
b <- rnorm(100)
c <- a + b
cor(a,b) # - 0.0009
cor(a,c) # 0.68
cor(b,c) #0.72
library(car)
scatterplot.matrix(~a+b+c)
pairs(~a+b+c)
library(lattice)
splom(~a+b+c_
splom(~a+b+c)
splom(~a+b+c)
splom(c(a,b,c)
splom(c(a,b,c)
)
splom(c(a,b,c))
splom([a,b,c])
pairs(~a+b+c,density=TRUE)
density(a)
pairs.panels(c(a,b,c),
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
pairs.panels([a,b,c],
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
pairs.panels([a,b,c],
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
pairs.panels([a,b,c],
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
library(psych)
install.packages(psych)
install.packages("psych")
pairs.panels(~a+b+c,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
x = data.frame()
x[1]=a
x= data.frame(a)
x= data.frame(a,b,c)
pairs.panels(x,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
library(psych)
pairs.panels(x,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
insert_fun()
?insert_fun()
??insert_fun
install.packages("highr")
?knit_theme
??knit_theme
opts_knit$set(out.format = "latex")
library(knitr)
?knit_theme
opts_knit$set(out.format = "latex")
thm =knit_theme$get("default")
knit_theme$set(thm)
opts_knit$set(out.format = NULL)
thm
install.packages('knitr')
install.packages("knitr")
library(knitr)
themes <- knit_theme$get()
Code <- "'R sample'; \"string2\" # comment.    # examples from Tinn R
var_a = 1:100  ; var.b <- 1: 4.6  # Numbers, Identifier
1 + 1 - 1 * 1 / 1 ^ 1 < 6 & !TRUE;  #h$k ?  # Operator, Symbol
tryCatch(NA); NULL; TRUE; T; FALSE; if(F) 7  # Programming
mean; as.data.frame(iris) # Function, dataset
plot(4, col='blue', cex=0.5) # Plotting
foo = function(dummy=NA) if (TRUE) {  for (i in 1:10) x <- NULL }"
#sqrt(-1)  # warning  #1 + \"a\"  # error" only makes sense if eval=TRUE
for(i in 1:length(themes))
{
file <- paste0("theme-",themes[i],".Rnw")
# Header:
cat("\\documentclass{article}
\\usepackage[paperheight=3.3cm,paperwidth=14cm, left=0cm,right=0cm,
top=0cm,bottom=0cm]{geometry}
\\begin{document}\n", file=file)
# Code
cat(paste0("<<theme",i,", echo=FALSE>>=
knit_theme$set(knit_theme$get('", themes[i], "'))
@\n"), file=file, append=TRUE)
cat(paste0("<<code",i,", eval=FALSE>>=\n"), file=file, append=TRUE)
cat(paste(themes[i], "   ;", Code), file=file, append=TRUE)
cat("\n@\n\n", file=file, append=TRUE)
# Enddoc:
cat("\\end{document}", file=file, append=TRUE)
#
# Make PDF
knit2pdf(input=paste0("theme-",themes[i],".Rnw"))
}
# combine_all
pdffiles <- dir(pattern=glob2rx("*.pdf"))
pdffiles <- pdffiles[-42] # "fine_blue" does not work...
file <- "2_combine_all.Rnw"
#
cat("\\documentclass[a4paper]{article}
\\usepackage[cm]{fullpage}
\\begin{document}
\\center
knitr syntax highlighting theme examples overview\\\\
Berry Boessenkool, berry-b@gmx.de, Sept 2014\n\n", file=file)
#
for(i in 1:length(pdffiles))
cat(paste0("\\includegraphics[width=.8\\linewidth]{",pdffiles[i],"}\n"),
file=file, append=TRUE)
#
cat("\\end{document}", file=file, append=TRUE)
rm cache/*
set.seed(1121)
(x=rnorm(20))
mean(x);var(x)
par(mar=c(4,4,.1,.1),cex.lab=.95,cex.axis=.9,mgp=c(2,.7,0),tcl=-.3,las=1)
boxplot(x)
hist(x,main='')
## two plots side by side (option fig.show='hold')
par(mar=c(4,4,.1,.1),cex.lab=.95,cex.axis=.9,mgp=c(2,.7,0),tcl=-.3,las=1)
boxplot(x)
hist(x,main='')
setwd("~/Data/github/AGLM/Assignment1")
x=rnorm(20)
plot(x)
lines(x)
curve(x)
lines(x)
plot(x,ltype="l")
plot(x,lty="l")
?plot
plot(x,type="l")
a <- -498.683 / 140.988
b <- 4.885 * 6.677
c <- 9.112 / 6.900
a <- round(-498.683 / 140.988,3)
b <- round(4.885 * 6.677,3)
c <- round(9.112 / 6.900,3)
a <- round(-498.683 / 140.988 , 3)
b <- round(4.885 * 6.677 , 3)
c <- round(9.112 / 6.900 , 3)
d <- round(1841257.15 / (1 - 0.5708) , 3)
e <- round(d - 1841257.15, 3)
int(e)
integer(e)
e
d <- 1841257.15 / (1 - 0.5708)
e <- d - 1841257.15
e
d <- 1841257.15 / (1 - 0.5708)
e <- d - 1841257.15
e
d
e+1841257
eval(e)
?format
format(d,scientific=FALSE)
1841257.15 / (1 - 0.5708)
F = (e / 51) / (181257.15 / (51 -(2+1)) )
